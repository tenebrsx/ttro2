rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Products collection - public read, admin write
    match /products/{productId} {
      // Allow public read access for website visitors
      allow read: if true;

      // Allow write access for admin operations (temporarily disabled auth for development)
      allow write: if true;

      // Validate product data structure on write
      allow create, update: if validateProductData(request.resource.data);
    }

    // Categories collection - public read, admin write
    match /categories/{categoryId} {
      allow read: if true;
      allow write: if true; // Admin operations only (temporarily disabled auth for development)
    }

    // Orders collection - restricted access
    match /orders/{orderId} {
      // Allow users to read their own orders (for now allowing all reads for public order tracking)
      allow read: if true;

      // Allow creating new orders
      allow create: if validateOrderData(request.resource.data);

      // Allow admin to update order status (temporarily disabled auth for development)
      allow update: if true;

      // Prevent deletion of orders
      allow delete: if false;
    }

    // Settings collection - admin only
    match /settings/{settingId} {
      allow read: if true; // Some settings might need to be public
      allow write: if true; // Admin operations only (temporarily disabled auth for development)
    }

    // Analytics and logs collection - admin only
    match /analytics/{analyticsId} {
      allow read, write: if true; // Admin operations only (temporarily disabled auth for development)
    }

    // Default deny rule for any other documents
    match /{document=**} {
      allow read, write: if false;
    }
  }

  // Validation functions
  function validateProductData(data) {
    // Only validate essential fields, make others optional
    return data.keys().hasAll(['name', 'price', 'category']) &&
           data.name is string &&
           data.price is number &&
           data.category is string &&
           // Optional fields validation
           (!data.keys().hasAny(['description']) || data.description is string) &&
           (!data.keys().hasAny(['shortDescription']) || data.shortDescription is string) &&
           (!data.keys().hasAny(['images']) || data.images is list) &&
           (!data.keys().hasAny(['thumbnailImage']) || data.thumbnailImage is string) &&
           (!data.keys().hasAny(['preparationTime']) || data.preparationTime is string) &&
           (!data.keys().hasAny(['serves']) || data.serves is string) &&
           (!data.keys().hasAny(['difficulty']) || data.difficulty is string) &&
           (!data.keys().hasAny(['customizations']) || data.customizations is list) &&
           (!data.keys().hasAny(['allergens']) || data.allergens is list) &&
           (!data.keys().hasAny(['dietaryOptions']) || data.dietaryOptions is list) &&
           (!data.keys().hasAny(['ingredients']) || data.ingredients is list) &&
           (!data.keys().hasAny(['tags']) || data.tags is list) &&
           (!data.keys().hasAny(['featured']) || data.featured is bool) &&
           (!data.keys().hasAny(['available']) || data.available is bool) &&
           (!data.keys().hasAny(['seasonal']) || data.seasonal is bool) &&
           (!data.keys().hasAny(['popularityScore']) || data.popularityScore is number) &&
           (!data.keys().hasAny(['rating']) || data.rating is number) &&
           (!data.keys().hasAny(['reviewsCount']) || data.reviewsCount is number) &&
           (!data.keys().hasAny(['seo']) || data.seo is map);
  }

  function validateOrderData(data) {
    return data.keys().hasAll(['customerInfo', 'items', 'total', 'status']) &&
           data.customerInfo is map &&
           data.items is list &&
           data.total is number &&
           data.status is string;
  }
}
